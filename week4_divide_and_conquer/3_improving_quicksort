using System;

namespace ImproveQuickSort
{
    class Program
    {
        static void Main(string[] args)
        {
            // Input
            int n = int.Parse(Console.ReadLine());
            var answer = Console.ReadLine();
            string[] m = answer.Split(' ');
            int[] a = Array.ConvertAll(m, int.Parse);

            // Improving QuickSort
            randomized_quick_sort(a, 0, n - 1);
            foreach (int i in a)
            {
                Console.Write($"{i}" + " ");
            }
            Console.Read();
        }
        static void randomized_quick_sort(int[] a, int low, int high)
        {
            if (low < high)
            {
                int mid = partition(a, low, high);
                randomized_quick_sort(a, low, mid);
                randomized_quick_sort(a, mid + 1, high);
            }
        }

        // Hoare's partition scheme in QuickSort

        /*
        This function takes last element as pivot, places the pivot element  
        at its correct position in sorted array, and places all smaller  
        (smaller than pivot) to left of pivot and all greater elements to right of pivot
        */
        static int partition(int[] a, int l, int h)
        {
            int pivot = a[l];
            int i = l - 1;
            int j = h + 1;
            while (true)
            {
                // Find the leftmost element greater than or equal to pivot
                do
                {
                    i++;
                } while (a[i] < pivot);

                // Find the rightmost element smaller than or equal to pivot
                do
                {
                    j--;
                } while (a[j] > pivot);

                // If two pointers met
                if (i >= j)
                {
                    return j;
                }

                // Swap a[i] and a[j]
                (a[i], a[j]) = (a[j], a[i]);
            }
        }
    }
}
